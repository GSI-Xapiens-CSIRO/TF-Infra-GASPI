version: '3.8'

#================================================================================================
# NETWORK SETUP
#================================================================================================
networks:
  atlantis_net:
    name: atlantis_net
    driver: bridge
    ipam:
      config:
        - subnet: 172.149.0.0/16

#================================================================================================
# VOLUME SETUP
#================================================================================================
volumes:
  vol_atlantis:
    driver: ${VOLUMES_DRIVER:-local}
    driver_opts:
      o: bind
      type: none
      device: ${DATA_ATLANTIS:-/opt/data/docker/atlantis}
  vol_atlantis_aws:
    driver: ${VOLUMES_DRIVER:-local}
    driver_opts:
      o: bind
      type: none
      device: ${DATA_ATLANTIS_AWS:-/opt/data/docker/atlantis/aws}
  vol_atlantis_src:
    driver: ${VOLUMES_DRIVER:-local}
    driver_opts:
      o: bind
      type: none
      device: ${DATA_ATLANTIS_SRC:-/opt/data/docker/atlantis/src}
  vol_atlantis_config:
    driver: ${VOLUMES_DRIVER:-local}
    driver_opts:
      o: bind
      type: none
      device: ${DATA_ATLANTIS_CONFIG:-/opt/data/docker/atlantis/config}

#================================================================================================
# SERVICES
#================================================================================================
services:
  #================================================================================================
  # PORTAINER
  #================================================================================================
  portainer:
    # image: dockerframework/portainer:${PORTAINER_VERSION:-2.9}
    image: portainer/portainer-ce:${PORTAINER_VERSION:-2.20.3-alpine}
    container_name: ${CONTAINER_PORTAINER:-gxc_portainer}
    restart: unless-stopped
    ports:
      - "${PORT_PORTAINER:-5212}:9000"
    volumes:
      - /etc/localtime:/etc/localtime:ro          ## Do not use it in mac
      - /var/run/docker.sock:/var/run/docker.sock ## Do not use it in k8s
      - /opt/data/docker/portainer2.20:/data
    environment:
      - PORTAINER_TEMPLATE=generic
      - PORTAINER_VERSION=${PORTAINER_VERSION:-2.20.3-alpine}
    privileged: true
    networks:
      atlantis_net:
        ipv4_address: ${CONTAINER_IP_PORTAINER:-172.149.149.5}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5212/api/status"]
      interval: 60s
      timeout: 5s
      retries: 5

  #================================================================================================
  # ATLANTIS TERRAFORM
  #================================================================================================
  atlantis:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        PYTHON_VERSION: 3.12
    # image: ${ATLANTIS_IMAGE:-YOUR_AWS_ACCOUNT.dkr.ecr.ap-southeast-3.amazonaws.com/gxc/atlantis-sbeacon}:${ATLANTIS_VERSION:-latest}
    container_name: ${CONTAINER_ATLANTIS:-gxc_atlantis}
    restart: unless-stopped
    ports:
      - "${PORT_ATLANTIS:-4141}:4141"
    volumes:
      # System mounts
      - /var/run/docker.sock:/var/run/docker.sock
      # Project data
      - vol_atlantis_src:/atlantis/src:ro
      # AWS credentials
      - ${DATA_ATLANTIS_AWS:-/opt/data/docker/atlantis/aws}/credentials:/home/atlantis/.aws/credentials:ro
      - ${DATA_ATLANTIS_AWS:-/opt/data/docker/atlantis/aws}/config:/home/atlantis/.aws/config:ro
      # Atlantis configuration
      - ${DATA_ATLANTIS:-/opt/data/docker/atlantis}/atlantis.yaml:/atlantis/atlantis.yaml:ro
      - ${DATA_ATLANTIS_CONFIG:-/opt/data/docker/atlantis/config}/repo.yaml:/atlantis/repo.yaml:ro
      # Project DEV configurations
      - ${DATA_ATLANTIS_CONFIG:-/opt/data/docker/atlantis/config}/hub01/backend.tf:/atlantis/sbeacon/hub01/backend.tf:ro
      - ${DATA_ATLANTIS_CONFIG:-/opt/data/docker/atlantis/config}/hub01/backend.tfvars:/atlantis/sbeacon/hub01/backend.tfvars:ro
      - ${DATA_ATLANTIS_CONFIG:-/opt/data/docker/atlantis/config}/hub01/hub01.tfvars:/atlantis/sbeacon/hub01/hub01.tfvars:ro
      - ${DATA_ATLANTIS_CONFIG:-/opt/data/docker/atlantis/config}/hub02/backend.tf:/atlantis/sbeacon/hub02/backend.tf:ro
      - ${DATA_ATLANTIS_CONFIG:-/opt/data/docker/atlantis/config}/hub02/backend.tfvars:/atlantis/sbeacon/hub02/backend.tfvars:ro
      - ${DATA_ATLANTIS_CONFIG:-/opt/data/docker/atlantis/config}/hub02/hub02.tfvars:/atlantis/sbeacon/hub02/hub02.tfvars:ro
      - ${DATA_ATLANTIS_CONFIG:-/opt/data/docker/atlantis/config}/hub03/backend.tf:/atlantis/sbeacon/hub03/backend.tf:ro
      - ${DATA_ATLANTIS_CONFIG:-/opt/data/docker/atlantis/config}/hub03/backend.tfvars:/atlantis/sbeacon/hub03/backend.tfvars:ro
      - ${DATA_ATLANTIS_CONFIG:-/opt/data/docker/atlantis/config}/hub03/hub03.tfvars:/atlantis/sbeacon/hub03/hub03.tfvars:ro
      - ${DATA_ATLANTIS_CONFIG:-/opt/data/docker/atlantis/config}/hub04/backend.tf:/atlantis/sbeacon/hub04/backend.tf:ro
      - ${DATA_ATLANTIS_CONFIG:-/opt/data/docker/atlantis/config}/hub04/backend.tfvars:/atlantis/sbeacon/hub04/backend.tfvars:ro
      - ${DATA_ATLANTIS_CONFIG:-/opt/data/docker/atlantis/config}/hub04/hub04.tfvars:/atlantis/sbeacon/hub04/hub04.tfvars:ro
      # Project UAT configurations
      - ${DATA_ATLANTIS_CONFIG:-/opt/data/docker/atlantis/config}/uat01/backend.tf:/atlantis/sbeacon/uat01/backend.tf:ro
      - ${DATA_ATLANTIS_CONFIG:-/opt/data/docker/atlantis/config}/uat01/backend.tfvars:/atlantis/sbeacon/uat01/backend.tfvars:ro
      - ${DATA_ATLANTIS_CONFIG:-/opt/data/docker/atlantis/config}/uat01/uat01.tfvars:/atlantis/sbeacon/uat01/uat01.tfvars:ro
      - ${DATA_ATLANTIS_CONFIG:-/opt/data/docker/atlantis/config}/uat02/backend.tf:/atlantis/sbeacon/uat02/backend.tf:ro
      - ${DATA_ATLANTIS_CONFIG:-/opt/data/docker/atlantis/config}/uat02/backend.tfvars:/atlantis/sbeacon/uat02/backend.tfvars:ro
      - ${DATA_ATLANTIS_CONFIG:-/opt/data/docker/atlantis/config}/uat02/uat02.tfvars:/atlantis/sbeacon/uat02/uat02.tfvars:ro
      - ${DATA_ATLANTIS_CONFIG:-/opt/data/docker/atlantis/config}/uat03/backend.tf:/atlantis/sbeacon/uat03/backend.tf:ro
      - ${DATA_ATLANTIS_CONFIG:-/opt/data/docker/atlantis/config}/uat03/backend.tfvars:/atlantis/sbeacon/uat03/backend.tfvars:ro
      - ${DATA_ATLANTIS_CONFIG:-/opt/data/docker/atlantis/config}/uat03/uat03.tfvars:/atlantis/sbeacon/uat03/uat03.tfvars:ro
      - ${DATA_ATLANTIS_CONFIG:-/opt/data/docker/atlantis/config}/uat04/backend.tf:/atlantis/sbeacon/uat04/backend.tf:ro
      - ${DATA_ATLANTIS_CONFIG:-/opt/data/docker/atlantis/config}/uat04/backend.tfvars:/atlantis/sbeacon/uat04/backend.tfvars:ro
      - ${DATA_ATLANTIS_CONFIG:-/opt/data/docker/atlantis/config}/uat04/uat04.tfvars:/atlantis/sbeacon/uat04/uat04.tfvars:ro
      # Data directory
      - ${DATA_ATLANTIS:-/opt/data/docker/atlantis}/data:/atlantis-data
    environment:
      # GitHub Configuration
      - ATLANTIS_GH_HOSTNAME=github.com
      - ATLANTIS_GH_USER=${ATLANTIS_GH_USER:-gxc-gh-user}
      - ATLANTIS_GH_TOKEN=${ATLANTIS_GH_TOKEN}
      - ATLANTIS_GH_WEBHOOK_SECRET=${ATLANTIS_GH_WEBHOOK_SECRET}
      # Web Configuration
      - ATLANTIS_WEB_HOSTNAME=${ATLANTIS_WEB_HOSTNAME:-atlantis.example.com}
      - ATLANTIS_PORT=${PORT_ATLANTIS:-4141}
      - ATLANTIS_ATLANTIS_URL=https://${ATLANTIS_WEB_HOSTNAME:-atlantis.example.com}
      # AWS Configuration
      - AWS_REGION=${AWS_REGION:-ap-southeast-3}
      - AWS_SHARED_CREDENTIALS_FILE=/home/atlantis/.aws/credentials
      - AWS_CONFIG_FILE=/home/atlantis/.aws/config
      # Project Configuration
      - ATLANTIS_CONFIG=/atlantis/atlantis.yaml
      - ATLANTIS_ALLOW_COMMANDS=version,plan,apply,unlock,approve_policies
      - ATLANTIS_REPO_ALLOWLIST=${ATLANTIS_REPO_ALLOWLIST:-github.com/GSI-Xapiens-CSIRO/*}
      - ATLANTIS_REPO_CONFIG=/atlantis/repo.yaml
      - ATLANTIS_AUTOMERGE=true
      - ATLANTIS_AUTODISCOVER_MODE=auto
      - ATLANTIS_DELETE_SOURCE_BRANCH_ON_MERGE=true
      - ATLANTIS_PARALLEL_PLAN=true
      - ATLANTIS_PARALLEL_APPLY=true
      - ATLANTIS_ABORT_ON_EXECUTION_ORDER_FAIL=true
      # Organization Structure
      - GXC_MANAGEMENT_ACCOUNT=${GXC_MANAGEMENT_ACCOUNT}
      - GXC_SECURITY_ACCOUNT=${GXC_SECURITY_ACCOUNT}
      - GXC_LOGS_ACCOUNT=${GXC_LOGS_ACCOUNT}
      - GXC_BILLING_ACCOUNT=${GXC_BILLING_ACCOUNT}
      - GXC_HUB01_ACCOUNT=${GXC_HUB01_ACCOUNT}
      - GXC_HUB02_ACCOUNT=${GXC_HUB02_ACCOUNT}
      - GXC_HUB03_ACCOUNT=${GXC_HUB03_ACCOUNT}
      - GXC_HUB04_ACCOUNT=${GXC_HUB04_ACCOUNT}
      - GXC_UAT01_ACCOUNT=${GXC_UAT01_ACCOUNT}
      - GXC_UAT02_ACCOUNT=${GXC_UAT02_ACCOUNT}
      - GXC_UAT03_ACCOUNT=${GXC_UAT03_ACCOUNT}
      - GXC_UAT04_ACCOUNT=${GXC_UAT04_ACCOUNT}
      # Other Configuration
      - DEFAULT_CONFTEST_VERSION=${CONFTEST_VERSION:-0.56.0}
      - TZ=Asia/Jakarta
      - PYTHONPATH=/usr/local/lib/python3.12/site-packages
    user: "100:100" # atlantis:atlantis
    privileged: true
    networks:
      atlantis_net:
        ipv4_address: ${CONTAINER_IP_ATLANTIS:-172.149.149.6}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4141/healthz"]
      interval: 60s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '1.50'
          memory: 2G
        reservations:
          cpus: '0.30'
          memory: 256M
    labels:
      app: atlantis
      env: staging
      team: devops

  #================================================================================================
  # NGINX ATLANTIS
  #================================================================================================
  nginx:
    image: nginx:1.25.3-alpine
    container_name: ${CONTAINER_NGINX:-gxc_nginx}
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ${DATA_NGINX:-/opt/data/docker/nginx}/conf.d:/etc/nginx/conf.d
      - ${DATA_NGINX:-/opt/data/docker/nginx}/ssl:/etc/nginx/ssl
      - ${DATA_NGINX:-/opt/data/docker/nginx}/logs:/var/log/nginx
    environment:
      - NGINX_HOST=${ATLANTIS_WEB_HOSTNAME:-atlantis.example.com}
      - NGINX_PORT=80
    depends_on:
      - atlantis
    networks:
      atlantis_net:
        ipv4_address: ${CONTAINER_IP_NGINX:-172.149.149.7}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/healthz"]
      interval: 60s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '0.30'
          memory: 512M
        reservations:
          cpus: '0.10'
          memory: 128M
    labels:
      app: nginx
      env: staging
      team: devops